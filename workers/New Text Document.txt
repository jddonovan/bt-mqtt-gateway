import json
import logger
import inspect
# LINE 64 -> make it so that it only runs if there are new devices, when compared to a device list already sent to home assistant

from contextlib import contextmanager

from mqtt import MqttMessage
from workers.base import BaseWorker

_LOGGER = logger.get(__name__)

REQUIREMENTS = ["bluepy"]


#HA
from interruptingcow import timeout
import time
from exceptions import DeviceTimeoutError
from mqtt import MqttConfigMessage
ATTR_LOW_BATTERY = 'low_battery'

class Lywsd03MmcWorker(BaseWorker):
    callingclass = None
    blocklist = []
    devicesDiscovered = [] # home assistant
    monitoredAttrs = ["temperature","temperature_raw", "humidity", "lqi", "packet_loss"] #["temperature", "temperature_raw", "humidity","humidity_raw", "battery_pct", "rssi", "battery_mv", "lqi_measurement", "lqi", "packet_loss", "lqi_average"] #add all supported
    def _setup(self):
        self.devices = {}
        _LOGGER.info("Adding devices by auto-discovery. LYWSD03MMC is supported with custom firmware (ATC or pvvx).")
        #self.devices
      #  if hasattr(self, 'monitored_attributes'):
      #    _LOGGER.info("%s",type(self.monitored_attributes))
     #     _LOGGER.info("%s",self.monitored_attributes)
          #for name in self.monitored_attributes.items():
 
       # if hasattr(self, 'friendly_name'):
        #  _LOGGER.info("%s",type(self.friendly_name))
          #_LOGGER.info("%s",self.friendly_name)

        stack = inspect.stack()
        self.callingclass = stack[2][0]
        #the_class = stack[2][0].f_locals["self"].__class__.__name__
        #the_method = stack[2][0].f_code.co_name
      #  _LOGGER.info("I was called by {}.{}()".format(stack[1][0], stack[1][1]))
   #     _LOGGER.info("I was called by {}.{}()".format(stack[2][0], stack[2][1]))
    #    _LOGGER.info("I was called by {}.{}()".format(stack[3][0], stack[3][1]))
        

#for name, mac in self.devices.items():
            #_LOGGER.info("Adding %s device '%s' (%s)", repr(self), name, mac)
            #self.devices[name] = lywsd03mmc(mac.lower(), command_timeout=self.command_timeout, passive=self.passive, measurement_interval=self.measurement_interval if hasattr(self, 'measurement_interval') else 4)

    def find_device(self, mac):
        for name, device in self.devices.items():
            if device.mac == mac:
                return device
        return

    def find_supported_device(self, scanData, deviceName, mac):
        for (adtype, desc, data) in scanData:
#            _LOGGER.info("yes?  %s  or (%s)", data[0:4], (len(data) == ((19-2)*2)))
            supported = ((len(data) == ((16-2)*2) or len(data) == ((19-2)*2)) and (data[0:4] == "1a18") )
            for mac_part in self.blocklist:
              if mac.lower().replace(":","")[6:12] in str(mac_part).lower().replace(":",""): return False

            if supported and not deviceName in self.devices and not deviceName in self.blocklist:
           #   _LOGGER.info("Adding newly found device: %s (%s)", deviceName, mac)
              pvvx = len(data) == ((19-2)*2)
              _friendly_name = deviceName
              for mac_part, friendlyname in self.friendly_name.items():
                if mac.lower().replace(":","")[6:12] in str(mac_part).lower().replace(":",""):
                  _friendly_name = friendlyname
                 # _LOGGER.info("Found friendly name: %s %s", mac_part, friendlyname )
              _LOGGER.info("Adding newly found device: %s %s (%s)", _friendly_name, deviceName, mac)
              self.devices[deviceName] = lywsd03mmc(mac, command_timeout=self.command_timeout, pvvx=pvvx, friendly_name=_friendly_name, measurement_interval = self.measurement_interval, rolling_average_count = self.rolling_average_count )
              self.config_device(_friendly_name, mac)
              self.callingclass.f_locals["self"].__class__._publish_config(self.callingclass.f_locals["self"])
            return ((len(data) == ((16-2)*2) or len(data) == ((19-2)*2)) and (data[0:4] == "1a18") )


    #def add_supported_device(self, deviceName, mac):
    #    _LOGGER.info("Adding %s device (%s)", repr(self), mac)
    #    self.devices[deviceName] = lywsd03mmc(mac, command_timeout=self.command_timeout, pvvx)
    


    def status_update(self):
        from bluepy import btle
        scanner = btle.Scanner()
        results = scanner.scan(self.scan_timeout if hasattr(self, 'scan_timeout') else 20.0, passive=True)

        for res in results:
            mac = res.addr
            deviceName = "ATC_" + mac.upper().replace(":","")[6:12]
            deviceScanData = res.getScanData()
            #device = self.find_device(res.addr)
            found = self.find_supported_device(deviceScanData, deviceName, mac)
            for (adtype, desc, value) in deviceScanData:
              #_LOGGER.debug("Found device %s: (%s) - %s  len: %s", mac, found, value, len(value) )
              if found: 
                device = self.devices[deviceName]
                if (len(value) == 16):
                  device.pvvx = false
               # _LOGGER.info("%s - received scan data %s, RSSI: %s", res.addr, value, res.rssi)
                device.setRSSI(res.rssi)
                device.processScanValue(value) 


        for name, device in self.devices.items():
            if device.freshresults == False: continue
            try:
                with timeout(self.command_timeout, exception=DeviceTimeoutError):
                    yield self.update_device_state(device.friendly_name, device)
            except btle.BTLEException as e:
                logger.log_exception(
                    _LOGGER,
                    "Error during update of %s device '%s' (%s): %s",
                    repr(self),
                    name,
                    device.mac,
                    type(e).__name__,
                    suppress=True,
                )
            except DeviceTimeoutError:
                logger.log_exception(
                    _LOGGER,
                    "Time out during update of %s device '%s' (%s)",
                    repr(self),
                    name,
                    device.mac,
                    suppress=True,
                )
            
## NON-HA
            #try:
            #    ret = device.readAll()
            #except btle.BTLEDisconnectError as e:
            #    self.log_connect_exception(_LOGGER, name, e)
            #except btle.BTLEException as e:
            #    self.log_unspecified_exception(_LOGGER, name, e)
            #else:
            #    yield [MqttMessage(topic=self.format_topic(name), payload=json.dumps(ret))]


# Home assistant integration
    def config(self, availability_topic):

        stack = inspect.stack()
        
   #     _LOGGER.info("CONFIG was called by {}.{}()".format(stack[1][0], stack[1][1]))
    #    _LOGGER.info("CONFIG was called by {}.{}()".format(stack[2][0], stack[2][1]))
   #    _LOGGER.info("CONFIG was called by {}.{}()".format(stack[3][0], stack[3][1]))
   #  # //  _LOGGER.info("is this working?? CONFIG " )
       # ret = []
        #ret += device
     #   for name, device in self.devices.items():
     #       ret += self.config_device(name, device.mac)
        return self.devicesDiscovered

# Home assistant integration
    def config_device(self, name, mac):
        ret = []


        device = {
            "identifiers": [mac, self.format_discovery_id(mac, name)],
            "manufacturer": "Xiaomi",
            "model": "Mijia Lywsd03Mmc",
            "name": self.format_discovery_name(name),
        }
        for attr in self.monitoredAttrs:
            payload = {
                "unique_id": self.format_discovery_id(mac, name, attr),
                "state_topic": self.format_prefixed_topic(name, attr),
                "name": self.format_discovery_name(name, attr),
                "device": device,
            }

            if attr == "humidity":
                payload.update({"icon": "mdi:water", "unit_of_measurement": "%"}) 
            elif attr == "humidity_raw":
                payload.update({"icon": "mdi:water-percent", "unit_of_measurement": "%"})
            elif attr == "temperature":
                payload.update({"device_class": "temperature", "unit_of_measurement": "Â°C"})
            elif attr == "temperature_raw":
                payload.update({"icon": "mdi:thermometer-lines", "unit_of_measurement": "Â°C"})
            elif attr == "battery_pct":
                payload.update({"icon": "mdi:battery", "unit_of_measurement": "%"})
             #   payload.update({"device_class": "battery", "unit_of_measurement": "%"})
            elif attr == "battery_mv":
                payload.update({"device_class": "voltage", "unit_of_measurement": "mV"})
            elif attr == "lqi_measurement":
                payload.update({"icon": "mdi:broadcast", "unit_of_measurement": "lqiÂ²"})
            elif attr == "lqi":
                payload.update({"icon": "mdi:signal", "unit_of_measurement": "lqi"})
            elif attr == "lqi_average":
                payload.update({"icon": "mdi:signal", "unit_of_measurement": "lqi"})
            elif attr == "rssi":
                payload.update({"icon": "mdi:access-point", "unit_of_measurement": "rssi"})
            elif attr == "packet_loss":
                payload.update({"icon": "mdi:broadcast", "unit_of_measurement": "%"})
 
            ret.append(
                MqttConfigMessage(
                    MqttConfigMessage.SENSOR,
                    self.format_discovery_topic(mac, name, attr),  #definition in base.py
                    payload=payload,
                )
            )

        ret.append(
            MqttConfigMessage(
                MqttConfigMessage.BINARY_SENSOR,
                self.format_discovery_topic(mac, name, ATTR_LOW_BATTERY), #definition in base.py
                payload={
                    "unique_id": self.format_discovery_id(mac, name, ATTR_LOW_BATTERY),
                    "state_topic": self.format_prefixed_topic(name, ATTR_LOW_BATTERY),
                    "name": self.format_discovery_name(name, ATTR_LOW_BATTERY),
                    "device": device,
                    "device_class": "battery",
                },
            )
        )

        #for command in self._config_commands:
        #    messages = command.execute()
        #    for msg in messages:
        #        msg.topic = "{}/{}".format(
        #            self._config["sensor_config"].get("topic", "homeassistant"),
        #            msg.topic,
        #        )
        #        msg.retain = self._config["sensor_config"].get("retain", True)
        #    self._mqtt.publish(messages)


        #self.devicesDiscovered += ret
        self.devicesDiscovered = ret
       # return ret

# Home assistant integration
    def update_device_state(self, name, device):
        ret = []
     #   _LOGGER.info("Updating state")
        if device.readAll() is None :
            return ret
        for attr in self.monitoredAttrs:
            attrValue = None
            if attr == "humidity":
                attrValue = device.getHumidity()
            if attr == "humidity_raw":
                attrValue = device.getHumidityRaw()
            elif attr == "temperature":
                attrValue = device.getTemperature()
            elif attr == "temperature_raw":
                attrValue = device.getTemperatureRaw()
            elif attr == "battery_pct":
                attrValue = device.getBatteryPercentage()
            elif attr == "battery_mv":
                attrValue = device.getBatteryVoltage()
            elif attr == "rssi":
                attrValue = device.getRSSI()
            elif attr == "lqi_measurement":
                attrValue = device.getLQImeas()
            elif attr == "lqi":
                attrValue = device.getLQI()
            elif attr == "packet_loss":
                attrValue = device.getPacketloss()
            elif attr == "lqi_average":
                attrValue = device.getLQIAverage()

            if attrValue == "skip": continue

            ret.append(
                MqttMessage(
                    topic=self.format_topic(name, attr),
                    payload=attrValue,
                )
            )

       #  Low battery binary sensor
        ret.append(
            MqttMessage(
                topic=self.format_topic(name, ATTR_LOW_BATTERY),
                payload=self.true_false_to_ha_on_off(device.getBatteryPercentage() < 3),
            )
        )

        return ret


class lywsd03mmc:
    def __init__(self, mac,friendly_name, command_timeout=30, pvvx = False, measurement_interval = 4, rolling_average_count = 8 ):
        self.mac = mac
        self.command_timeout = command_timeout
        self.pvvx = pvvx
        self.freshresults = True
        self.measurementinterval = measurement_interval
        self.friendly_name = friendly_name
        self.rolling_average_count = rolling_average_count

        self._last_updated = -999 ## implement
        self._temperature_raw = None 
        self._humidity_raw = None
        self._battery_pct = None
        self._battery_mv = None
        self._rssi = 0
        self._previousCounter = None
        self._currentCounter = None
        self._LQI=[]
        self._LQI=[0 for i in range(256)] 
        #self._LQImeasurements=[]
        self._LQImeasurements=[0 for i in range(256)]
        #self._TemperatureHistory=[]
        self._TemperatureHistory=[0.0 for i in range(256)]
       # self._TemperatureHistory=[]
        self._HumidityHistory=[0.0 for i in range(256)]
        self._devicecounter = 0 # Required to announce "unknown" for LQI until results have been collected
      #  self._previouscapture = 999
     #   self._timebetween = 999
        

    def readAll(self):
        temperature = self.getTemperature()
        temperature_raw = self.getTemperatureRaw()
        humidity = self.getHumidity()
        humidity_raw = self.getHumidityRaw()
        battery_pct = self.getBatteryPercentage()
        battery_mv = self.getBatteryVoltage()
        rssi = self.getRSSI()
        lqi_meas = self.getLQImeas()
        lqi = self.getLQI()
        packetloss = self.getPacketloss()
        lqi_average = self.getLQIAverage()
        

        if temperature_raw and humidity:
            _LOGGER.debug("%s - data received ok", self.mac)#_LOGGER.debug("%s - found values %f C, %d %%, %d, RSI: %d, LQI: %d, count: %d, totalcount: %d ", self.mac, temperature, humidity, battery, rssi, linkqualityin, count, self. self._devicecounter)
        else:
            _LOGGER.debug("%s - no data received", self.mac)

        return {
            "temperature_raw": temperature_raw,
            "temperature": temperature,
            "humidity_raw": humidity_raw,
            "humidity": humidity,
            "battery_pct": battery_pct,
            "battery_mv": battery_mv,
            "rssi": rssi,
            "lqi_measurement": lqi_meas,
            "lqi": lqi,
            "packetloss": packetloss,
            "lqi_average": lqi_average
        }

    def getTemperatureRaw(self):
        return self._temperature_raw
    def getHumidityRaw(self):
        return self._humidity_raw

    def recordCounter(self, counter):
   #     _LOGGER.info("Record counter")
        if self._previousCounter != None:
           if counter > self._previousCounter: #without rollover
              self.freshresults = True
              for i in range(self._previousCounter + 1, counter + 1):        
                 self._LQImeasurements[i] = 0
                 self._LQI[i] = 0
                 self._TemperatureHistory[i] = 0
                 self._HumidityHistory[i] = 0
                 self._devicecounter += counter - self._previousCounter
           elif counter == self._previousCounter:     # broadcast for same measurement       
              self.freshresults = False
           else:  #with rollover
              self.freshresults = True
              self._devicecounter += 256 - self._previousCounter + counter
              if self._previousCounter < 255:
                 for i in range(self._previousCounter + 1, 256):
                    self._LQImeasurements[i] = 0
                    self._LQI[i] = 0
                    self._TemperatureHistory[i] = 0
                    self._HumidityHistory[i] = 0
              for i in range(0, counter + 1):
                self._LQImeasurements[i] = 0
                self._LQI[i] = 0
                self._TemperatureHistory[i] = 0
                self._HumidityHistory[i] = 0
        self._LQImeasurements[counter] = 1
        self._LQI[counter] += 1
        self._previousCounter = counter
        self._TemperatureHistory[counter] = self._temperature_raw
        self._HumidityHistory[counter] = self._humidity_raw


    def getHumidity(self):
        return self.processMeasurement(self._HumidityHistory)
      #  return self._humidity

    def getBatteryPercentage(self):
        return self._battery_pct
    
    def getBatteryVoltage(self):
        return self._battery_mv
        
    def getRSSI(self):
        return self._rssi

    def setRSSI(self, value):
         self._rssi = int(value)
        
    def getLQImeas(self):
        if self._devicecounter >= 255:
           return sum(self._LQImeasurements) - 1; #all packets received is 256/256. Substracting 1 so that LQI is max 255. Equiv. with Zigbee specs.
        return 'unknown'

    def getPacketloss(self):
        if self._devicecounter >= 255:
           return 100 - (sum(self._LQImeasurements)/20//256)*20;
        return 'unknown'

    def getLQIAverage(self):
        if self._devicecounter >= 255:
           return round(sum(self._LQI)/4) - 1;
        return 'unknown'
    
    def getLQI(self):
        if self._devicecounter >= 63:
           firstCounter = self._previousCounter - 64
           return sum(self._LQI[max(firstCounter,0):self._previousCounter]) +sum(self._LQI[255+min(firstCounter,0) : 255])
        return 'unknown'

    def getTemperature(self):
        return self.processMeasurement(self._TemperatureHistory)

    def getHumidity(self):
        return self.processMeasurement(self._HumidityHistory)
       # if self.pvvx and self._devicecounter >= self.rolling_average_count: # only pvvx firmware supports 0.01 accuracy humidity
       #    firstCounter = self._previousCounter - self.rolling_average_count
       ##    _LOGGER.info("%s - measuement: %s", self.mac, ' '.join(str(x) for x in self._TemperatureHistory))
       # #   _LOGGER.info("%s -measurementscount %s", self.mac, ' '.join(str(x) for x in self._LQImeasurements))
       #    measurement = sum(self._HumidityHistory[max(firstCounter,0):self._previousCounter]) + sum(self._HumidityHistory[255+min(firstCounter,0) : 255])
       #    measurement_count = sum(self._LQImeasurements[max(firstCounter,0):self._previousCounter]) + sum(self._LQImeasurements[255+min(firstCounter,0) : 255])
       #    return round(measurement/measurement_count, 2)
       # return 'unknown'
#_TemperatureHistory

    def processMeasurement(self, measurementArray):
           measurements = {}
           for i in range(3):
             startPosition = self._previousCounter + 1 - self.rolling_average_count -  self.rolling_average_count * i
             endPosition = self._previousCounter + 1 - self.rolling_average_count * i 
             measurements[str(i) + "_sum"] = sum(measurementArray[max(startPosition,0):endPosition]) + sum(measurementArray[255+min(startPosition,0) : 255])
             measurements[str(i) + "_count"] =sum(self._LQImeasurements[max(startPosition,0):endPosition]) + sum(self._LQImeasurements[255+min(startPosition,0) : 255])
             measurements[str(i)] =  0 if measurements[str(i) + "_count"] == 0 else round(measurements[str(i) + "_sum"] / measurements[str(i) + "_count"] , 2)
           sameSign = abs(-2*measurements["0"] + measurements["1"] + measurements["2"]) == abs(measurements["0"]) + abs(measurements["1"]-measurements["0"] ) + abs(measurements["2"]-measurements["0"])
           measurementDiff = abs(measurements["0"] - measurements["1"])
           if (sameSign or measurementDiff >= 0.03 or self._previousCounter % 64 == 0): ## Only update if sensor change is consistent (=constantly positive or negative), the difference is larger than 0.03 or every 64 packets (assuming that this packet is received, not lost)
           #  _LOGGER.info("measurement sent. Samesign: %s, diff: %s", sameSign, measurementDiff )
             return measurements["0"]
           else: 
      #       _LOGGER.info("skipping temp signalling")
             return 'skip'

    def subscribe(self, device):
        device.setDelegate(self)

    def reverseMAC(self, rev):
        rev = ""
        for x in range(-1, -len(a), -2):
          rev += a[x-1] + a[x]
        return value

    def toLittleEndian(self, a, signed):
        ba = bytearray.fromhex(a)
        value = int.from_bytes(ba, byteorder='little', signed=signed)
        return value


    def processScanValue(self, data):
      #  _LOGGER.info("Processing scan values")
        if self.pvvx:
            #_LOGGER.info("From value: %s", data)
            temperature_raw = self.toLittleEndian(data[16:20], True) / 100 #int.from_bytes(data[16:20], byteorder='little', signed=True) / 100 
            humidity = self.toLittleEndian(data[20:24], False) /100
            battery_mv = self.toLittleEndian(data[24:28], False)
            battery_pct = self.toLittleEndian(data[28:30], False)
            counter = self.toLittleEndian(data[30:32], False)
            flags = self.toLittleEndian(data[32:34], False)
            #rssi = self.toLittleEndian(data[34:36], False)

#            temperature = int(self.toLittleEndian(data[16:20]), 16) / 100
#            humidity = int(self.toLittleEndian(data[20:24]), 16)+(1 << 32) /100
#            battery_mv = int(self.toLittleEndian(data[24:28]), 16)+(1 << 32)
#            battery_level = int(self.toLittleEndian(data[28:30]), 16)+(1 << 32)

            self._temperature_raw = round(temperature_raw,2)
            self._humidity_raw = round(humidity, 2)
            
            self._battery_pct = round(battery_pct)
            self._battery_mv = round(battery_mv)

            self.recordCounter(counter)
            #self._internalcounter += 1
            #self._rssi = round(rssi)
            if self.freshresults and   '.' in str(self.getTemperature()):
               #_LOGGER.info("%s - found values %f C, smoothed %s C, %d %%, %d, RSI: %d, Measurement: %s, LQI-Short: %s count: %d, totalcount: %d ", 
#self.mac, temperature, self.getsmTemp(), humidity, self._battery_pct, self._rssi, self.getLQImeas(), self.getLQIshort(), counter, self._devicecounter)
               diffe = self.getTemperature()-temperature_raw
               if diffe > 1:
                    _LOGGER.info("%s - %s - %s temphistory: %s", self.mac, counter, self.getTemperature()-temperature_raw, ' '.join(str(x) for x in self._TemperatureHistory))
                    _LOGGER.info("%s - %s - %s meas: %s", self.mac, counter, self.getTemperature()-temperature_raw, ' '.join(str(x) for x in self._LQImeasurements))
        else:
# needs updating
            temperature_raw = int(data[16:20], 16) / 10
            humidity = int(data[20:22], 16)
            battery_pct = int(data[22:24], 16)

            self._temperature_raw = round(temperature_raw, 1)
            self._humidity = round(humidity)
            self._battery_pct = round(_pct, 4)
           #self._battery_mv = round(battery_mv, 4)

  #  def handleNotification(self, handle, data):
  #      temperature = int.from_bytes(data[0:2], byteorder='little', signed=True) / 100
   #     humidity = int.from_bytes(data[2:3], byteorder='little')
   #     battery = int.from_bytes(data[3:5], byteorder='little') / 1000

     #   self._temperature = round(temperature, 1)
    #    self._humidity = round(humidity)
     #   self._battery = round(battery, 4)
